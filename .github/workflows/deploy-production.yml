name: Deploy to Production

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY_PRODUCTION:
        required: true
      REMOTE_USER_PRODUCTION:
        required: true
      REMOTE_HOST_PRODUCTION:
        required: true
      REMOTE_PATH_PRODUCTION:
        required: true

env:
  PHP_VERSION: '8.2'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, intl, zip, pdo, mysql, bcmath, gd, xml, curl, redis, imagick
          tools: composer

      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Set storage permissions
        run: |
          mkdir -p storage/framework/cache
          sudo chmod -R 775 storage bootstrap/cache
          sudo chown -R $USER:www-data storage

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader
      
      - name: Build Frontend Assets
        run: npm install && npm run build

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}

      - name: Setup remote directories
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER_PRODUCTION }}@${{ secrets.REMOTE_HOST_PRODUCTION }} '
            mkdir -p ${{ secrets.REMOTE_PATH_PRODUCTION }}/blue &&
            mkdir -p ${{ secrets.REMOTE_PATH_PRODUCTION }}/green &&
            mkdir -p ${{ secrets.REMOTE_PATH_PRODUCTION }}/shared/storage
          '

      - name: Determine deployment target (blue or green)
        id: deployment_target
        run: |
          TARGET=$(ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER_PRODUCTION }}@${{ secrets.REMOTE_HOST_PRODUCTION }} '
            CURRENT_LINK="${{ secrets.REMOTE_PATH_PRODUCTION }}/current"
            if [ -L "$CURRENT_LINK" ] && [ -e "$CURRENT_LINK" ]; then
              readlink "$CURRENT_LINK" | grep -q "blue" && echo "green" || echo "blue"
            else
              echo "blue"
            fi
          ')
          echo "DEPLOYMENT_TARGET=$TARGET" >> $GITHUB_OUTPUT

      - name: Deploy files to slot
        run: |
          rsync -avz --exclude='.git' --exclude='node_modules' --exclude='tests' --exclude='.env' ./ \
            ${{ secrets.REMOTE_USER_PRODUCTION }}@${{ secrets.REMOTE_HOST_PRODUCTION }}:${{ secrets.REMOTE_PATH_PRODUCTION }}/${{ steps.deployment_target.outputs.DEPLOYMENT_TARGET }}/

      - name: Setup symlinks
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER_PRODUCTION }}@${{ secrets.REMOTE_HOST_PRODUCTION }} '
            ln -nfs ${{ secrets.REMOTE_PATH_PRODUCTION }}/shared/storage ${{ secrets.REMOTE_PATH_PRODUCTION }}/${{ steps.deployment_target.outputs.DEPLOYMENT_TARGET }}/storage &&
            ln -nfs ${{ secrets.REMOTE_PATH_PRODUCTION }}/.env ${{ secrets.REMOTE_PATH_PRODUCTION }}/${{ steps.deployment_target.outputs.DEPLOYMENT_TARGET }}/.env
          '

      - name: Run Artisan commands
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER_PRODUCTION }}@${{ secrets.REMOTE_HOST_PRODUCTION }} '
            cd ${{ secrets.REMOTE_PATH_PRODUCTION }}/${{ steps.deployment_target.outputs.DEPLOYMENT_TARGET }} &&
            php artisan optimize &&
            php artisan optimize:clear
             
          '

      - name: Switch symlink to new slot
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER_PRODUCTION }}@${{ secrets.REMOTE_HOST_PRODUCTION }} '
            ln -nfs ${{ secrets.REMOTE_PATH_PRODUCTION }}/${{ steps.deployment_target.outputs.DEPLOYMENT_TARGET }} \
              ${{ secrets.REMOTE_PATH_PRODUCTION }}/current
          '

      - name: Deployment success
        if: success()
        run: echo "✅ Production deployment completed without health check!"

      - name: Deployment failure
        if: failure()
        run: echo "❌ Production deployment failed!"